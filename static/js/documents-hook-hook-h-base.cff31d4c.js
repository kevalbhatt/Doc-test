(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"./src/documents/Hook/Hook-HBase.md":function(e,a,t){"use strict";t.r(a),t.d(a,"default",function(){return i});var o=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),n=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),s={},l="wrapper";function i(e){var a=e.components,t=Object(o.a)(e,["components"]);return Object(n.b)(l,Object.assign({},s,t,{components:a,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"apache-atlas-hook--bridge-for-apache-hbase"},"Apache Atlas Hook & Bridge for Apache HBase"),Object(n.b)("h2",{id:"hbase-model"},"HBase Model"),Object(n.b)("p",null,"HBase model includes the following types:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Entity types:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"hbase_namespace",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"super-types: !Asset"),Object(n.b)("li",{parentName:"ul"},"attributes: qualifiedName, name, description, owner, clusterName, parameters, createTime, modifiedTime"))),Object(n.b)("li",{parentName:"ul"},"hbase_table",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"super-types: !DataSet"),Object(n.b)("li",{parentName:"ul"},"attributes: qualifiedName, name, description, owner, namespace, column_families, uri, parameters, createtime, modifiedtime, maxfilesize, isReadOnly, isCompactionEnabled, isNormalizationEnabled, ReplicaPerRegion, Durability"))),Object(n.b)("li",{parentName:"ul"},"hbase_column_family",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},"super-types: !DataSet"),Object(n.b)("li",{parentName:"ul"},"attributes:  qualifiedName, name, description, owner, columns, createTime, bloomFilterType, compressionType, compactionCompressionType, encryptionType, inMemoryCompactionPolicy, keepDeletedCells, maxversions, minVersions, datablockEncoding, storagePolicy, ttl, blockCachedEnabled, cacheBloomsOnWrite, cacheDataOnWrite, evictBlocksOnClose, prefetchBlocksOnOpen, newVersionsBehavior, isMobEnabled, mobCompactPartitionPolicy")))))),Object(n.b)("p",null,"HBase entities are created and de-duped in Atlas using unique attribute qualifiedName, whose value should be formatted as detailed below. Note that namespaceName, tableName and columnFamilyName should be in lower case."),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"   hbase_namespace.qualifiedName:      <namespaceName>@<clusterName>\n   hbase_table.qualifiedName:          <namespaceName>:<tableName>@<clusterName>\n   hbase_column_family.qualifiedName:  <namespaceName>:<tableName>.<columnFamilyName>@<clusterName>\n")),Object(n.b)("h2",{id:"hbase-hook"},"HBase Hook"),Object(n.b)("p",null,"Atlas HBase hook registers with HBase master as a co-processor. On detecting changes to HBase namespaces/tables/column-families, Atlas hook updates the metadata in Atlas via Kafka notifications.\nFollow the instructions below to setup Atlas hook in HBase:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Register Atlas hook in hbase-site.xml by adding the following:"),Object(n.b)("pre",{parentName:"li"},Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"<property>\n  <name>hbase.coprocessor.master.classes</name>\n  <value>org.apache.atlas.hbase.hook.HBaseAtlasCoprocessor</value>\n</property>\n"))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"untar apache-atlas-${project.version}-hbase-hook.tar.gz")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"cd apache-atlas-hbase-hook-${project.version}")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Copy entire contents of folder apache-atlas-hbase-hook-${project.version}/hook/hbase to ",Object(n.b)("inlineCode",{parentName:"p"},"<atlas package>"),"/hook/hbase")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Link Atlas hook jars in HBase classpath - 'ln -s ",Object(n.b)("inlineCode",{parentName:"p"},"<atlas package>"),"/hook/hbase/* ",Object(n.b)("inlineCode",{parentName:"p"},"<hbase-home>"),"/lib/'")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("p",{parentName:"li"},"Copy ",Object(n.b)("inlineCode",{parentName:"p"},"<atlas-conf>"),"/atlas-application.properties to the HBase conf directory."))),Object(n.b)("p",null,"The following properties in atlas-application.properties control the thread pool and notification details:"),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"atlas.hook.hbase.synchronous=false # whether to run the hook synchronously. false recommended to avoid delays in HBase operations. Default: false\natlas.hook.hbase.numRetries=3      # number of retries for notification failure. Default: 3\natlas.hook.hbase.queueSize=10000   # queue size for the threadpool. Default: 10000\n\natlas.cluster.name=primary # clusterName to use in qualifiedName of entities. Default: primary\n\natlas.kafka.zookeeper.connect=                    # Zookeeper connect URL for Kafka. Example: localhost:2181\natlas.kafka.zookeeper.connection.timeout.ms=30000 # Zookeeper connection timeout. Default: 30000\natlas.kafka.zookeeper.session.timeout.ms=60000    # Zookeeper session timeout. Default: 60000\natlas.kafka.zookeeper.sync.time.ms=20             # Zookeeper sync time. Default: 20\n")),Object(n.b)("p",null,'Other configurations for Kafka notification producer can be specified by prefixing the configuration name with "atlas.kafka.".\nFor list of configuration supported by Kafka producer, please refer to ',Object(n.b)("a",Object.assign({parentName:"p"},{href:"http://kafka.apache.org/documentation/#producerconfigs"}),"Kafka Producer Configs")),Object(n.b)("h2",{id:"notes"},"NOTES"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Only the namespace, table and column-family create/update/ delete operations are captured by Atlas HBase hook. Changes to columns are be captured.")),Object(n.b)("h2",{id:"importing-hbase-metadata"},"Importing HBase Metadata"),Object(n.b)("p",null,"Apache Atlas provides a command-line utility, import-hbase.sh, to import metadata of Apache HBase namespaces and tables into Apache Atlas.\nThis utility can be used to initialize Apache Atlas with namespaces/tables present in a Apache HBase cluster.\nThis utility supports importing metadata of a specific table, tables in a specific namespace or all tables."),Object(n.b)("pre",null,Object(n.b)("code",Object.assign({parentName:"pre"},{className:"language-shell"}),"Usage 1: <atlas package>/hook-bin/import-hbase.sh\nUsage 2: <atlas package>/hook-bin/import-hbase.sh [-n <namespace regex> OR --namespace <namespace regex>] [-t <table regex> OR --table <table regex>]\nUsage 3: <atlas package>/hook-bin/import-hbase.sh [-f <filename>]\n           File Format:\n             namespace1:tbl1\n             namespace1:tbl2\n             namespace2:tbl1\n")))}i&&i===Object(i)&&Object.isExtensible(i)&&Object.defineProperty(i,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/documents/Hook/Hook-HBase.md"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=documents-hook-hook-h-base.15a147b285b85e504ce6.js.map