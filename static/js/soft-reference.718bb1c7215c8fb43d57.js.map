{"version":3,"sources":["/Users/keval/projects/atlas/doc/src/SoftReference.md"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_keval_projects_atlas_doc_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","isMDXComponent"],"mappings":"2WAWMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAATC,GAGZ,IAFDC,EAECD,EAFDC,WACGC,EACFC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,gBACD,OAAOG,OAAAE,EAAA,EAAAF,CAACL,EAADK,OAAAG,OAAA,GAAeT,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYM,QAAQ,cAC5EJ,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,yCADR,0CAGAL,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,cADR,cAGAL,OAAAE,EAAA,EAAAF,CAAA,mJACAA,OAAAE,EAAA,EAAAF,CAAA,4FACAA,OAAAE,EAAA,EAAAF,CAAA,4IACAA,OAAAE,EAAA,EAAAF,CAAA,2BAAsBA,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,KAAf,mBAAtB,kBAAoFN,OAAAE,EAAA,EAAAF,CAAA,MAAIM,WAAW,KAAf,QAApF,8EACAN,OAAAE,EAAA,EAAAF,CAAA,KAAQ,CACNK,GAAM,iBADR,iBAGAL,OAAAE,EAAA,EAAAF,CAAA,mEACAA,OAAAE,EAAA,EAAAF,CAAA,WAAKA,OAAAE,EAAA,EAAAF,CAAA,OAAAA,OAAAG,OAAA,CAAMG,WAAW,OAAU,CAC5BC,UAAa,kBADZ,8cAkBTX,EAAWY,gBAAiB","file":"static/js/soft-reference.71ceecb0.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"entity-attribute-option-softreference\"\n    }}>{`Entity Attribute Option: SoftReference`}</h1>\n    <h4 {...{\n      \"id\": \"background\"\n    }}>{`Background`}</h4>\n    <p>{`Entity attributes are specified using attribute definitions. An attributes persistence strategy is determined by based on their type. `}</p>\n    <p>{`Primitive types are persisted as properties within the vertex of their parent. `}</p>\n    <p>{`Non-primitive attributes get a vertex of their own and and edge is created between the parent the child to establish ownership.`}</p>\n    <p>{`Attribute with `}<em parentName=\"p\">{`isSoftReference`}</em>{` option set to `}<em parentName=\"p\">{`true`}</em>{`, is non-primitive attribute that gets treatment of a primitive attribute.`}</p>\n    <h4 {...{\n      \"id\": \"specification\"\n    }}>{`Specification`}</h4>\n    <p>{`Below is an example of using the new attribute option.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`  \"attributeDefs\": [\n    {\n      \"name\": \"replicatedFrom\",\n      \"typeName\": \"array<AtlasServer>\",\n      \"cardinality\": \"SET\",\n      \"isIndexable\": false,\n      \"isOptional\": true,\n      \"isUnique\": false,\n      \"options\": {\n        \"isSoftReference\": \"true\"\n      }\n    },\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}