{"version":3,"sources":["/home/sameer/workspace/Doc-test/docz-theme-default/components/shared/Img/index.js","/home/sameer/workspace/Doc-test/src/documents/HighLevelArchitecture.md"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_docz_lib_docz__WEBPACK_IMPORTED_MODULE_3__","Img","props","src","width","height","baseUrl","useConfig","concat","layoutProps","MDXLayout","MDXContent","_ref","components","Object","_home_sameer_workspace_Doc_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","docz_theme_default_components_shared_Img__WEBPACK_IMPORTED_MODULE_3__","parentName","href","isMDXComponent"],"mappings":"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","file":"static/js/src-documents-high-level-architecture.23903e54.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { get } from \"../../../utils/theme\";\nimport { mq, breakpoints } from \"../../../styles/responsive\";\nimport { useConfig } from \"../../../../docz-lib/docz\";\nconst Img = props => {\n\tconst { src,width,height } = props;\n\tconst { baseUrl } = useConfig();\n\treturn (\n\t\t<div>\n\t\t\t<img src={`${baseUrl}${src}`} height={`${height || 'auto'}`} width={`${width || '100%'}`} />\n\t\t</div>\n\t);\n};\nexport default Img;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport Img from 'docz-theme-default/components/shared/Img'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"architecture\"\n    }}>{`Architecture`}</h1>\n    <h2 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h2>\n    <h2 {...{\n      \"id\": \"atlas-high-level-architecture---overview\"\n    }}>{`Atlas High Level Architecture - Overview`}</h2>\n    <Img src={`/images/twiki/architecture.png`} width=\"800\" mdxType=\"Img\" />\n    <p>{`The components of Atlas can be grouped under the following major categories:`}</p>\n    <h3 {...{\n      \"id\": \"core\"\n    }}>{`Core`}</h3>\n    <p>{`Atlas core includes the following components:`}</p>\n    <p><strong parentName=\"p\">{`Type System`}</strong>{`: Atlas allows users to define a model for the metadata objects they want to manage. The model is composed\nof definitions called ‘types’. Instances of ‘types’ called ‘entities’ represent the actual metadata objects that are\nmanaged. The Type System is a component that allows users to define and manage the types and entities. All metadata\nobjects managed by Atlas out of the box (like Hive tables, for e.g.) are modelled using types and represented as\nentities. To store new types of metadata in Atlas, one needs to understand the concepts of the type system component.`}</p>\n    <p>{`One key point to note is that the generic nature of the modelling in Atlas allows data stewards and integrators to\ndefine both technical metadata and business metadata. It is also possible to define rich relationships between the\ntwo using features of Atlas.`}</p>\n    <p><strong parentName=\"p\">{`Graph Engine`}</strong>{`: Internally, Atlas persists metadata objects it manages using a Graph model. This approach provides great\nflexibility and enables efficient handling of rich relationships between the metadata objects. Graph engine component is\nresponsible for translating between types and entities of the Atlas type system, and the underlying graph persistence model.\nIn addition to managing the graph objects, the graph engine also creates the appropriate indices for the metadata\nobjects so that they can be searched efficiently. Atlas uses the JanusGraph to store the metadata objects.`}</p>\n    <p><strong parentName=\"p\">{`Ingest / Export`}</strong>{`: The Ingest component allows metadata to be added to Atlas. Similarly, the Export component exposes\nmetadata changes detected by Atlas to be raised as events. Consumers can consume these change events to react to\nmetadata changes in real time.`}</p>\n    <h3 {...{\n      \"id\": \"integration\"\n    }}>{`Integration`}</h3>\n    <p>{`Users can manage metadata in Atlas using two methods:`}</p>\n    <p><strong parentName=\"p\">{`API`}</strong>{`: All functionality of Atlas is exposed to end users via a REST API that allows types and entities to be created,\nupdated and deleted. It is also the primary mechanism to query and discover the types and entities managed by Atlas.`}</p>\n    <p><strong parentName=\"p\">{`Messaging`}</strong>{`: In addition to the API, users can choose to integrate with Atlas using a messaging interface that is\nbased on Kafka. This is useful both for communicating metadata objects to Atlas, and also to consume metadata change\nevents from Atlas using which applications can be built. The messaging interface is particularly useful if one wishes\nto use a more loosely coupled integration with Atlas that could allow for better scalability, reliability etc. Atlas\nuses Apache Kafka as a notification server for communication between hooks and downstream consumers of metadata\nnotification events. Events are written by the hooks and Atlas to different Kafka topics.`}</p>\n    <h3 {...{\n      \"id\": \"metadata-sources\"\n    }}>{`Metadata sources`}</h3>\n    <p>{`Atlas supports integration with many sources of metadata out of the box. More integrations will be added in future\nas well. Currently, Atlas supports ingesting and managing metadata from the following sources:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"Hook-HBase\"\n        }}>{`HBase`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"Hook-Hive\"\n        }}>{`Hive`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"Hook-Sqoop\"\n        }}>{`Sqoop`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"Hook-Storm\"\n        }}>{`Storm`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"Hook-Kafka\"\n        }}>{`Kafka`}</a></li>\n    </ul>\n    <p>{`The integration implies two things:\nThere are metadata models that Atlas defines natively to represent objects of these components.\nThere are components Atlas provides to ingest metadata objects from these components\n(in real time or in batch mode in some cases).`}</p>\n    <h3 {...{\n      \"id\": \"applications\"\n    }}>{`Applications`}</h3>\n    <p>{`The metadata managed by Atlas is consumed by a variety of applications for satisfying many governance use cases.`}</p>\n    <p><strong parentName=\"p\">{`Atlas Admin UI`}</strong>{`: This component is a web based application that allows data stewards and scientists to discover\nand annotate metadata. Of primary importance here is a search interface and SQL like query language that can be\nused to query the metadata types and objects managed by Atlas. The Admin UI uses the REST API of Atlas for\nbuilding its functionality.`}</p>\n    <p><strong parentName=\"p\">{`Tag Based Policies`}</strong>{`: `}<a parentName=\"p\" {...{\n        \"href\": \"http://ranger.apache.org/\"\n      }}>{`Apache Ranger`}</a>{` is an advanced security management solution\nfor the Hadoop ecosystem having wide integration with a variety of Hadoop components. By integrating with Atlas,\nRanger allows security administrators to define metadata driven security policies for effective governance.\nRanger is a consumer to the metadata change events notified by Atlas.`}</p>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}